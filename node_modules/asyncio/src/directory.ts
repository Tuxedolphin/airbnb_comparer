
import * as fs from 'fs';

export namespace Directory { //to keep export from index clean until proposal is complete https://github.com/leebyron/ecmascript-more-export-from

    export async function exists(path: string): Promise<boolean> {
        return new Promise<boolean>((resolve, reject) => {
            fs.stat(path, (error, stat) => {
                if (error) {
                    if (error.code != 'ENOENT') reject(error);
                    resolve(false);
                }
                else if (!stat.isDirectory()) resolve(false);
                else resolve(true);
            });
        });
    }

    export async function files(path: string): Promise<string[]> {
        return new Promise<string[]>((resolve, reject) => {
            fs.readdir(path, (error, files) => {
                if (error) reject(error);
                else {
                    var statPromises = files.map(file =>
                        new Promise<{ path: string, isFile: boolean }>((resolveStat, rejectStat) => {
                            fs.stat(file, (statError, stat) => {
                                if (statError) resolveStat({ path: file, isFile: false });
                                else if (!stat.isFile()) resolveStat({ path: file, isFile: false });
                                else resolveStat({ path: file, isFile: true });
                            });
                        })
                    );
                    Promise.all(statPromises).then(result => {
                        var paths = result.filter(r => r.isFile).map(r => r.path);
                        resolve(paths);
                    });
                }
            });
        });
    }

    export async function directories(path: string): Promise<string[]> {
        return new Promise<string[]>((resolve, reject) => {
            fs.readdir(path, (error, dirs) => {
                if (error) reject(error);
                else {
                    var statPromises = dirs.map(dir =>
                        new Promise<{ path: string, isDir: boolean }>((resolveStat, rejectStat) => {
                            fs.stat(dir, (statError, stat) => {
                                if (statError) resolveStat({ path: dir, isDir: false });
                                else if (!stat.isDirectory()) resolveStat({ path: dir, isDir: false });
                                else resolveStat({ path: dir, isDir: true });
                            });
                        })
                    );
                    Promise.all(statPromises).then(result => {
                        var paths = result.filter(r => r.isDir).map(r => r.path);
                        resolve(paths);
                    });
                }
            });
        });
    }
}
